import { PayloadAction, createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { TasksState } from "../../../../App"
import { TaskForUpdateType, TaskType, tasksApi } from "../../../../api/tasksApi"
import { todolistsActions } from "../../todolistReducerRTK"
import { appActions } from "../../../../model/appReducerRTK"

const initialState: TasksState = {}

//Thunks

const fetchTasks = createAsyncThunk(
  "tasks/fetchTasks",
  async (todolistId: string, thunkApi) => {
    const { dispatch } = thunkApi
    // dispatch(appActions.changeAppStatus({ status: "loading" }))
    const res = await tasksApi.getTasks(todolistId)
    const tasks = res.data.items
    return { tasks, todolistId }
    // dispatch(tasksActions.setTasks({ tasks, todolistId }))
    // dispatch(appActions.changeAppStatus({ status: "succes" }))
  }
)

const slice = createSlice({
  name: "tasks",
  initialState,
  reducers: {
    removeTask: (
      state,
      action: PayloadAction<{ taskId: string; todolistId: string }>
    ) => {
      const tasks = state[action.payload.todolistId]
      const index = tasks.findIndex((t) => t.id === action.payload.taskId)
      if (index !== -1) {
        tasks.splice(index, 1)
      }
    },
    addTask: (state, action: PayloadAction<{ task: TaskType }>) => {
      const tasks = state[action.payload.task.todoListId]
      tasks.unshift(action.payload.task)
    },
    updateTask: (
      state,
      action: PayloadAction<{
        taskId: string
        model: TaskForUpdateType
        todolistId: string
      }>
    ) => {
      const tasks = state[action.payload.todolistId]
      const index = tasks.findIndex((t) => t.id === action.payload.taskId)
      if (index !== -1) {
        tasks[index] = { ...tasks[index], ...action.payload.model }
      }
    },
    // setTasks: (
      // state,
      // action: PayloadAction<{ tasks: TaskType[]; todolistId: string }>
    // ) => {
      // state[action.payload.todolistId] = action.payload.tasks
    // },
  },
  extraReducers: (builder) =>
    builder
      .addCase(todolistsActions.addTodolist, (state, action) => {
        state[action.payload.todolist.id] = []
      })
      .addCase(todolistsActions.removeTodolist, (state, action) => {
        delete state[action.payload.todolistId]
      })
      .addCase(todolistsActions.setTodolists, (state, action) => {
        action.payload.todolists.forEach((tl) => {
          state[tl.id] = []
        })
      })
      .addCase(fetchTasks.fulfilled, (state, action) => {
        state[action.payload.todolistId] = action.payload.tasks
      }),
})

export const tasksReducer = slice.reducer

export const tasksThunks = {}

export const tasksActions = slice.actions
